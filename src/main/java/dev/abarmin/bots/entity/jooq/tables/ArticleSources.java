/*
 * This file is generated by jOOQ.
 */
package dev.abarmin.bots.entity.jooq.tables;


import dev.abarmin.bots.entity.jooq.Keys;
import dev.abarmin.bots.entity.jooq.Public;
import dev.abarmin.bots.entity.jooq.tables.ArticleSubscriptions.ArticleSubscriptionsPath;
import dev.abarmin.bots.entity.jooq.tables.Articles.ArticlesPath;
import dev.abarmin.bots.entity.jooq.tables.records.ArticleSourcesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArticleSources extends TableImpl<ArticleSourcesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.ARTICLE_SOURCES</code>
     */
    public static final ArticleSources ARTICLE_SOURCES = new ArticleSources();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticleSourcesRecord> getRecordType() {
        return ArticleSourcesRecord.class;
    }

    /**
     * The column <code>PUBLIC.ARTICLE_SOURCES.SOURCE_ID</code>.
     */
    public final TableField<ArticleSourcesRecord, Integer> SOURCE_ID = createField(DSL.name("SOURCE_ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.ARTICLE_SOURCES.SOURCE_NAME</code>.
     */
    public final TableField<ArticleSourcesRecord, String> SOURCE_NAME = createField(DSL.name("SOURCE_NAME"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ARTICLE_SOURCES.SOURCE_URL</code>.
     */
    public final TableField<ArticleSourcesRecord, String> SOURCE_URL = createField(DSL.name("SOURCE_URL"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ARTICLE_SOURCES.SOURCE_LAST_UPDATED</code>.
     */
    public final TableField<ArticleSourcesRecord, LocalDateTime> SOURCE_LAST_UPDATED = createField(DSL.name("SOURCE_LAST_UPDATED"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>PUBLIC.ARTICLE_SOURCES.CREATED_AT</code>.
     */
    public final TableField<ArticleSourcesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>PUBLIC.ARTICLE_SOURCES.UPDATED_AT</code>.
     */
    public final TableField<ArticleSourcesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(6), this, "");

    private ArticleSources(Name alias, Table<ArticleSourcesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ArticleSources(Name alias, Table<ArticleSourcesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.ARTICLE_SOURCES</code> table reference
     */
    public ArticleSources(String alias) {
        this(DSL.name(alias), ARTICLE_SOURCES);
    }

    /**
     * Create an aliased <code>PUBLIC.ARTICLE_SOURCES</code> table reference
     */
    public ArticleSources(Name alias) {
        this(alias, ARTICLE_SOURCES);
    }

    /**
     * Create a <code>PUBLIC.ARTICLE_SOURCES</code> table reference
     */
    public ArticleSources() {
        this(DSL.name("ARTICLE_SOURCES"), null);
    }

    public <O extends Record> ArticleSources(Table<O> path, ForeignKey<O, ArticleSourcesRecord> childPath, InverseForeignKey<O, ArticleSourcesRecord> parentPath) {
        super(path, childPath, parentPath, ARTICLE_SOURCES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ArticleSourcesPath extends ArticleSources implements Path<ArticleSourcesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ArticleSourcesPath(Table<O> path, ForeignKey<O, ArticleSourcesRecord> childPath, InverseForeignKey<O, ArticleSourcesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ArticleSourcesPath(Name alias, Table<ArticleSourcesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ArticleSourcesPath as(String alias) {
            return new ArticleSourcesPath(DSL.name(alias), this);
        }

        @Override
        public ArticleSourcesPath as(Name alias) {
            return new ArticleSourcesPath(alias, this);
        }

        @Override
        public ArticleSourcesPath as(Table<?> alias) {
            return new ArticleSourcesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ArticleSourcesRecord, Integer> getIdentity() {
        return (Identity<ArticleSourcesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ArticleSourcesRecord> getPrimaryKey() {
        return Keys.ARTICLE_SOURCES_PK;
    }

    @Override
    public List<UniqueKey<ArticleSourcesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ARTICLE_SOURCE_NAME_UNIQUE, Keys.ARTICLE_SOURCE_URL_UNIQUE);
    }

    private transient ArticlesPath _articles;

    /**
     * Get the implicit to-many join path to the <code>PUBLIC.ARTICLES</code>
     * table
     */
    public ArticlesPath articles() {
        if (_articles == null)
            _articles = new ArticlesPath(this, null, Keys.ARTICLE_SOURCE_ID_FK.getInverseKey());

        return _articles;
    }

    private transient ArticleSubscriptionsPath _articleSubscriptions;

    /**
     * Get the implicit to-many join path to the
     * <code>PUBLIC.ARTICLE_SUBSCRIPTIONS</code> table
     */
    public ArticleSubscriptionsPath articleSubscriptions() {
        if (_articleSubscriptions == null)
            _articleSubscriptions = new ArticleSubscriptionsPath(this, null, Keys.ARTICLE_SUBSCRIPTION_SOURCE_ID_FK.getInverseKey());

        return _articleSubscriptions;
    }

    @Override
    public ArticleSources as(String alias) {
        return new ArticleSources(DSL.name(alias), this);
    }

    @Override
    public ArticleSources as(Name alias) {
        return new ArticleSources(alias, this);
    }

    @Override
    public ArticleSources as(Table<?> alias) {
        return new ArticleSources(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleSources rename(String name) {
        return new ArticleSources(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleSources rename(Name name) {
        return new ArticleSources(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleSources rename(Table<?> name) {
        return new ArticleSources(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleSources where(Condition condition) {
        return new ArticleSources(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleSources where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleSources where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleSources where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ArticleSources where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ArticleSources where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ArticleSources where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ArticleSources where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleSources whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ArticleSources whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
