/*
 * This file is generated by jOOQ.
 */
package dev.abarmin.bots.entity.jooq.tables;


import dev.abarmin.bots.entity.jooq.Keys;
import dev.abarmin.bots.entity.jooq.Public;
import dev.abarmin.bots.entity.jooq.tables.ArticleSubscriptions.ArticleSubscriptionsPath;
import dev.abarmin.bots.entity.jooq.tables.TelegramUpdates.TelegramUpdatesPath;
import dev.abarmin.bots.entity.jooq.tables.records.TelegramChatsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TelegramChats extends TableImpl<TelegramChatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.TELEGRAM_CHATS</code>
     */
    public static final TelegramChats TELEGRAM_CHATS = new TelegramChats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TelegramChatsRecord> getRecordType() {
        return TelegramChatsRecord.class;
    }

    /**
     * The column <code>PUBLIC.TELEGRAM_CHATS.ID</code>.
     */
    public final TableField<TelegramChatsRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.TELEGRAM_CHATS.CHAT_ID</code>.
     */
    public final TableField<TelegramChatsRecord, Long> CHAT_ID = createField(DSL.name("CHAT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TELEGRAM_CHATS.CHAT_STATUS</code>.
     */
    public final TableField<TelegramChatsRecord, String> CHAT_STATUS = createField(DSL.name("CHAT_STATUS"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TELEGRAM_CHATS.CREATED_AT</code>.
     */
    public final TableField<TelegramChatsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>PUBLIC.TELEGRAM_CHATS.UPDATED_AT</code>.
     */
    public final TableField<TelegramChatsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(6), this, "");

    private TelegramChats(Name alias, Table<TelegramChatsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TelegramChats(Name alias, Table<TelegramChatsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.TELEGRAM_CHATS</code> table reference
     */
    public TelegramChats(String alias) {
        this(DSL.name(alias), TELEGRAM_CHATS);
    }

    /**
     * Create an aliased <code>PUBLIC.TELEGRAM_CHATS</code> table reference
     */
    public TelegramChats(Name alias) {
        this(alias, TELEGRAM_CHATS);
    }

    /**
     * Create a <code>PUBLIC.TELEGRAM_CHATS</code> table reference
     */
    public TelegramChats() {
        this(DSL.name("TELEGRAM_CHATS"), null);
    }

    public <O extends Record> TelegramChats(Table<O> path, ForeignKey<O, TelegramChatsRecord> childPath, InverseForeignKey<O, TelegramChatsRecord> parentPath) {
        super(path, childPath, parentPath, TELEGRAM_CHATS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TelegramChatsPath extends TelegramChats implements Path<TelegramChatsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TelegramChatsPath(Table<O> path, ForeignKey<O, TelegramChatsRecord> childPath, InverseForeignKey<O, TelegramChatsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TelegramChatsPath(Name alias, Table<TelegramChatsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TelegramChatsPath as(String alias) {
            return new TelegramChatsPath(DSL.name(alias), this);
        }

        @Override
        public TelegramChatsPath as(Name alias) {
            return new TelegramChatsPath(alias, this);
        }

        @Override
        public TelegramChatsPath as(Table<?> alias) {
            return new TelegramChatsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TelegramChatsRecord, Integer> getIdentity() {
        return (Identity<TelegramChatsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TelegramChatsRecord> getPrimaryKey() {
        return Keys.TELEGRAM_CHATS_PK;
    }

    @Override
    public List<UniqueKey<TelegramChatsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CHAT_ID_UNIQUE);
    }

    private transient ArticleSubscriptionsPath _articleSubscriptions;

    /**
     * Get the implicit to-many join path to the
     * <code>PUBLIC.ARTICLE_SUBSCRIPTIONS</code> table
     */
    public ArticleSubscriptionsPath articleSubscriptions() {
        if (_articleSubscriptions == null)
            _articleSubscriptions = new ArticleSubscriptionsPath(this, null, Keys.ARTICLE_SUBSCRIPTION_CHAT_ID_FK.getInverseKey());

        return _articleSubscriptions;
    }

    private transient TelegramUpdatesPath _telegramUpdates;

    /**
     * Get the implicit to-many join path to the
     * <code>PUBLIC.TELEGRAM_UPDATES</code> table
     */
    public TelegramUpdatesPath telegramUpdates() {
        if (_telegramUpdates == null)
            _telegramUpdates = new TelegramUpdatesPath(this, null, Keys.UPDATE_CHAT_ID_FK.getInverseKey());

        return _telegramUpdates;
    }

    @Override
    public TelegramChats as(String alias) {
        return new TelegramChats(DSL.name(alias), this);
    }

    @Override
    public TelegramChats as(Name alias) {
        return new TelegramChats(alias, this);
    }

    @Override
    public TelegramChats as(Table<?> alias) {
        return new TelegramChats(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TelegramChats rename(String name) {
        return new TelegramChats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TelegramChats rename(Name name) {
        return new TelegramChats(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TelegramChats rename(Table<?> name) {
        return new TelegramChats(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TelegramChats where(Condition condition) {
        return new TelegramChats(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TelegramChats where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TelegramChats where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TelegramChats where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TelegramChats where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TelegramChats where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TelegramChats where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TelegramChats where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TelegramChats whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TelegramChats whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
