/*
 * This file is generated by jOOQ.
 */
package dev.abarmin.bots.entity.jooq.tables;


import dev.abarmin.bots.entity.jooq.Keys;
import dev.abarmin.bots.entity.jooq.Public;
import dev.abarmin.bots.entity.jooq.tables.ArticleSources.ArticleSourcesPath;
import dev.abarmin.bots.entity.jooq.tables.EpisodesArticles.EpisodesArticlesPath;
import dev.abarmin.bots.entity.jooq.tables.records.ArticlesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Articles extends TableImpl<ArticlesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.ARTICLES</code>
     */
    public static final Articles ARTICLES = new Articles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticlesRecord> getRecordType() {
        return ArticlesRecord.class;
    }

    /**
     * The column <code>PUBLIC.ARTICLES.ARTICLE_ID</code>.
     */
    public final TableField<ArticlesRecord, Integer> ARTICLE_ID = createField(DSL.name("ARTICLE_ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.ARTICLES.ARTICLE_SOURCE_ID</code>.
     */
    public final TableField<ArticlesRecord, Integer> ARTICLE_SOURCE_ID = createField(DSL.name("ARTICLE_SOURCE_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ARTICLES.ARTICLE_TITLE</code>.
     */
    public final TableField<ArticlesRecord, String> ARTICLE_TITLE = createField(DSL.name("ARTICLE_TITLE"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ARTICLES.ARTICLE_URL</code>.
     */
    public final TableField<ArticlesRecord, String> ARTICLE_URL = createField(DSL.name("ARTICLE_URL"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ARTICLES.ARTICLE_ADDED</code>.
     */
    public final TableField<ArticlesRecord, LocalDateTime> ARTICLE_ADDED = createField(DSL.name("ARTICLE_ADDED"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>PUBLIC.ARTICLES.CREATED_AT</code>.
     */
    public final TableField<ArticlesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>PUBLIC.ARTICLES.UPDATED_AT</code>.
     */
    public final TableField<ArticlesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(6), this, "");

    private Articles(Name alias, Table<ArticlesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Articles(Name alias, Table<ArticlesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.ARTICLES</code> table reference
     */
    public Articles(String alias) {
        this(DSL.name(alias), ARTICLES);
    }

    /**
     * Create an aliased <code>PUBLIC.ARTICLES</code> table reference
     */
    public Articles(Name alias) {
        this(alias, ARTICLES);
    }

    /**
     * Create a <code>PUBLIC.ARTICLES</code> table reference
     */
    public Articles() {
        this(DSL.name("ARTICLES"), null);
    }

    public <O extends Record> Articles(Table<O> path, ForeignKey<O, ArticlesRecord> childPath, InverseForeignKey<O, ArticlesRecord> parentPath) {
        super(path, childPath, parentPath, ARTICLES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ArticlesPath extends Articles implements Path<ArticlesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ArticlesPath(Table<O> path, ForeignKey<O, ArticlesRecord> childPath, InverseForeignKey<O, ArticlesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ArticlesPath(Name alias, Table<ArticlesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ArticlesPath as(String alias) {
            return new ArticlesPath(DSL.name(alias), this);
        }

        @Override
        public ArticlesPath as(Name alias) {
            return new ArticlesPath(alias, this);
        }

        @Override
        public ArticlesPath as(Table<?> alias) {
            return new ArticlesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ArticlesRecord, Integer> getIdentity() {
        return (Identity<ArticlesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ArticlesRecord> getPrimaryKey() {
        return Keys.ARTICLES_PK;
    }

    @Override
    public List<UniqueKey<ArticlesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ARTICLE_URL_UNIQUE);
    }

    @Override
    public List<ForeignKey<ArticlesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ARTICLE_SOURCE_ID_FK);
    }

    private transient ArticleSourcesPath _articleSources;

    /**
     * Get the implicit join path to the <code>PUBLIC.ARTICLE_SOURCES</code>
     * table.
     */
    public ArticleSourcesPath articleSources() {
        if (_articleSources == null)
            _articleSources = new ArticleSourcesPath(this, Keys.ARTICLE_SOURCE_ID_FK, null);

        return _articleSources;
    }

    private transient EpisodesArticlesPath _episodesArticles;

    /**
     * Get the implicit to-many join path to the
     * <code>PUBLIC.EPISODES_ARTICLES</code> table
     */
    public EpisodesArticlesPath episodesArticles() {
        if (_episodesArticles == null)
            _episodesArticles = new EpisodesArticlesPath(this, null, Keys.EPISODES_ARTICLES_ARTICLE_ID_FK.getInverseKey());

        return _episodesArticles;
    }

    @Override
    public Articles as(String alias) {
        return new Articles(DSL.name(alias), this);
    }

    @Override
    public Articles as(Name alias) {
        return new Articles(alias, this);
    }

    @Override
    public Articles as(Table<?> alias) {
        return new Articles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Articles rename(String name) {
        return new Articles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Articles rename(Name name) {
        return new Articles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Articles rename(Table<?> name) {
        return new Articles(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Articles where(Condition condition) {
        return new Articles(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Articles where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Articles where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Articles where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Articles where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Articles where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Articles where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Articles where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Articles whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Articles whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
