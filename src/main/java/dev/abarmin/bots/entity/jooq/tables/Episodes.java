/*
 * This file is generated by jOOQ.
 */
package dev.abarmin.bots.entity.jooq.tables;


import dev.abarmin.bots.entity.jooq.Keys;
import dev.abarmin.bots.entity.jooq.Public;
import dev.abarmin.bots.entity.jooq.tables.EpisodesArticles.EpisodesArticlesPath;
import dev.abarmin.bots.entity.jooq.tables.records.EpisodesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Episodes extends TableImpl<EpisodesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.EPISODES</code>
     */
    public static final Episodes EPISODES = new Episodes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EpisodesRecord> getRecordType() {
        return EpisodesRecord.class;
    }

    /**
     * The column <code>PUBLIC.EPISODES.EPISODE_ID</code>.
     */
    public final TableField<EpisodesRecord, Integer> EPISODE_ID = createField(DSL.name("EPISODE_ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.EPISODES.EPISODE_NAME</code>.
     */
    public final TableField<EpisodesRecord, String> EPISODE_NAME = createField(DSL.name("EPISODE_NAME"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.EPISODES.EPISODE_STATUS</code>.
     */
    public final TableField<EpisodesRecord, String> EPISODE_STATUS = createField(DSL.name("EPISODE_STATUS"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.EPISODES.CREATED_AT</code>.
     */
    public final TableField<EpisodesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>PUBLIC.EPISODES.UPDATED_AT</code>.
     */
    public final TableField<EpisodesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(6), this, "");

    private Episodes(Name alias, Table<EpisodesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Episodes(Name alias, Table<EpisodesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.EPISODES</code> table reference
     */
    public Episodes(String alias) {
        this(DSL.name(alias), EPISODES);
    }

    /**
     * Create an aliased <code>PUBLIC.EPISODES</code> table reference
     */
    public Episodes(Name alias) {
        this(alias, EPISODES);
    }

    /**
     * Create a <code>PUBLIC.EPISODES</code> table reference
     */
    public Episodes() {
        this(DSL.name("EPISODES"), null);
    }

    public <O extends Record> Episodes(Table<O> path, ForeignKey<O, EpisodesRecord> childPath, InverseForeignKey<O, EpisodesRecord> parentPath) {
        super(path, childPath, parentPath, EPISODES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EpisodesPath extends Episodes implements Path<EpisodesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EpisodesPath(Table<O> path, ForeignKey<O, EpisodesRecord> childPath, InverseForeignKey<O, EpisodesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EpisodesPath(Name alias, Table<EpisodesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EpisodesPath as(String alias) {
            return new EpisodesPath(DSL.name(alias), this);
        }

        @Override
        public EpisodesPath as(Name alias) {
            return new EpisodesPath(alias, this);
        }

        @Override
        public EpisodesPath as(Table<?> alias) {
            return new EpisodesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<EpisodesRecord, Integer> getIdentity() {
        return (Identity<EpisodesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EpisodesRecord> getPrimaryKey() {
        return Keys.EPISODES_PK;
    }

    @Override
    public List<UniqueKey<EpisodesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.EPISODE_NAME_UNIQUE);
    }

    private transient EpisodesArticlesPath _episodesArticles;

    /**
     * Get the implicit to-many join path to the
     * <code>PUBLIC.EPISODES_ARTICLES</code> table
     */
    public EpisodesArticlesPath episodesArticles() {
        if (_episodesArticles == null)
            _episodesArticles = new EpisodesArticlesPath(this, null, Keys.EPISODES_ARTICLES_EPISODE_ID_FK.getInverseKey());

        return _episodesArticles;
    }

    @Override
    public Episodes as(String alias) {
        return new Episodes(DSL.name(alias), this);
    }

    @Override
    public Episodes as(Name alias) {
        return new Episodes(alias, this);
    }

    @Override
    public Episodes as(Table<?> alias) {
        return new Episodes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Episodes rename(String name) {
        return new Episodes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Episodes rename(Name name) {
        return new Episodes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Episodes rename(Table<?> name) {
        return new Episodes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Episodes where(Condition condition) {
        return new Episodes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Episodes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Episodes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Episodes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Episodes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Episodes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Episodes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Episodes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Episodes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Episodes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
