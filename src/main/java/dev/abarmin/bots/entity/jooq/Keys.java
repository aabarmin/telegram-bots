/*
 * This file is generated by jOOQ.
 */
package dev.abarmin.bots.entity.jooq;


import dev.abarmin.bots.entity.jooq.tables.ArticleSources;
import dev.abarmin.bots.entity.jooq.tables.ArticleSubscriptions;
import dev.abarmin.bots.entity.jooq.tables.Articles;
import dev.abarmin.bots.entity.jooq.tables.Episodes;
import dev.abarmin.bots.entity.jooq.tables.EpisodesArticles;
import dev.abarmin.bots.entity.jooq.tables.TelegramChats;
import dev.abarmin.bots.entity.jooq.tables.TelegramUpdates;
import dev.abarmin.bots.entity.jooq.tables.records.ArticleSourcesRecord;
import dev.abarmin.bots.entity.jooq.tables.records.ArticleSubscriptionsRecord;
import dev.abarmin.bots.entity.jooq.tables.records.ArticlesRecord;
import dev.abarmin.bots.entity.jooq.tables.records.EpisodesArticlesRecord;
import dev.abarmin.bots.entity.jooq.tables.records.EpisodesRecord;
import dev.abarmin.bots.entity.jooq.tables.records.TelegramChatsRecord;
import dev.abarmin.bots.entity.jooq.tables.records.TelegramUpdatesRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * PUBLIC.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ArticleSourcesRecord> ARTICLE_SOURCE_NAME_UNIQUE = Internal.createUniqueKey(ArticleSources.ARTICLE_SOURCES, DSL.name("ARTICLE_SOURCE_NAME_UNIQUE"), new TableField[] { ArticleSources.ARTICLE_SOURCES.SOURCE_NAME }, true);
    public static final UniqueKey<ArticleSourcesRecord> ARTICLE_SOURCE_URL_UNIQUE = Internal.createUniqueKey(ArticleSources.ARTICLE_SOURCES, DSL.name("ARTICLE_SOURCE_URL_UNIQUE"), new TableField[] { ArticleSources.ARTICLE_SOURCES.SOURCE_URL }, true);
    public static final UniqueKey<ArticleSourcesRecord> ARTICLE_SOURCES_PK = Internal.createUniqueKey(ArticleSources.ARTICLE_SOURCES, DSL.name("ARTICLE_SOURCES_PK"), new TableField[] { ArticleSources.ARTICLE_SOURCES.SOURCE_ID }, true);
    public static final UniqueKey<ArticleSubscriptionsRecord> ARTICLE_SUBSCRIPTION_PK = Internal.createUniqueKey(ArticleSubscriptions.ARTICLE_SUBSCRIPTIONS, DSL.name("ARTICLE_SUBSCRIPTION_PK"), new TableField[] { ArticleSubscriptions.ARTICLE_SUBSCRIPTIONS.ID }, true);
    public static final UniqueKey<ArticlesRecord> ARTICLE_URL_UNIQUE = Internal.createUniqueKey(Articles.ARTICLES, DSL.name("ARTICLE_URL_UNIQUE"), new TableField[] { Articles.ARTICLES.ARTICLE_URL }, true);
    public static final UniqueKey<ArticlesRecord> ARTICLES_PK = Internal.createUniqueKey(Articles.ARTICLES, DSL.name("ARTICLES_PK"), new TableField[] { Articles.ARTICLES.ARTICLE_ID }, true);
    public static final UniqueKey<EpisodesRecord> EPISODE_NAME_UNIQUE = Internal.createUniqueKey(Episodes.EPISODES, DSL.name("EPISODE_NAME_UNIQUE"), new TableField[] { Episodes.EPISODES.EPISODE_NAME }, true);
    public static final UniqueKey<EpisodesRecord> EPISODES_PK = Internal.createUniqueKey(Episodes.EPISODES, DSL.name("EPISODES_PK"), new TableField[] { Episodes.EPISODES.EPISODE_ID }, true);
    public static final UniqueKey<EpisodesArticlesRecord> EPISODES_ARTICLES_PK = Internal.createUniqueKey(EpisodesArticles.EPISODES_ARTICLES, DSL.name("EPISODES_ARTICLES_PK"), new TableField[] { EpisodesArticles.EPISODES_ARTICLES.ID }, true);
    public static final UniqueKey<TelegramChatsRecord> CHAT_ID_UNIQUE = Internal.createUniqueKey(TelegramChats.TELEGRAM_CHATS, DSL.name("CHAT_ID_UNIQUE"), new TableField[] { TelegramChats.TELEGRAM_CHATS.CHAT_ID }, true);
    public static final UniqueKey<TelegramChatsRecord> TELEGRAM_CHATS_PK = Internal.createUniqueKey(TelegramChats.TELEGRAM_CHATS, DSL.name("TELEGRAM_CHATS_PK"), new TableField[] { TelegramChats.TELEGRAM_CHATS.ID }, true);
    public static final UniqueKey<TelegramUpdatesRecord> TELEGRAM_UPDATES_PK = Internal.createUniqueKey(TelegramUpdates.TELEGRAM_UPDATES, DSL.name("TELEGRAM_UPDATES_PK"), new TableField[] { TelegramUpdates.TELEGRAM_UPDATES.ID }, true);
    public static final UniqueKey<TelegramUpdatesRecord> UPDATE_ID_UNIQUE = Internal.createUniqueKey(TelegramUpdates.TELEGRAM_UPDATES, DSL.name("UPDATE_ID_UNIQUE"), new TableField[] { TelegramUpdates.TELEGRAM_UPDATES.UPDATE_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ArticleSubscriptionsRecord, TelegramChatsRecord> ARTICLE_SUBSCRIPTION_CHAT_ID_FK = Internal.createForeignKey(ArticleSubscriptions.ARTICLE_SUBSCRIPTIONS, DSL.name("ARTICLE_SUBSCRIPTION_CHAT_ID_FK"), new TableField[] { ArticleSubscriptions.ARTICLE_SUBSCRIPTIONS.CHAT_ID }, Keys.CHAT_ID_UNIQUE, new TableField[] { TelegramChats.TELEGRAM_CHATS.CHAT_ID }, true);
    public static final ForeignKey<ArticleSubscriptionsRecord, ArticleSourcesRecord> ARTICLE_SUBSCRIPTION_SOURCE_ID_FK = Internal.createForeignKey(ArticleSubscriptions.ARTICLE_SUBSCRIPTIONS, DSL.name("ARTICLE_SUBSCRIPTION_SOURCE_ID_FK"), new TableField[] { ArticleSubscriptions.ARTICLE_SUBSCRIPTIONS.ARTICLE_SOURCE_ID }, Keys.ARTICLE_SOURCES_PK, new TableField[] { ArticleSources.ARTICLE_SOURCES.SOURCE_ID }, true);
    public static final ForeignKey<ArticlesRecord, ArticleSourcesRecord> ARTICLE_SOURCE_ID_FK = Internal.createForeignKey(Articles.ARTICLES, DSL.name("ARTICLE_SOURCE_ID_FK"), new TableField[] { Articles.ARTICLES.ARTICLE_SOURCE_ID }, Keys.ARTICLE_SOURCES_PK, new TableField[] { ArticleSources.ARTICLE_SOURCES.SOURCE_ID }, true);
    public static final ForeignKey<EpisodesArticlesRecord, ArticlesRecord> EPISODES_ARTICLES_ARTICLE_ID_FK = Internal.createForeignKey(EpisodesArticles.EPISODES_ARTICLES, DSL.name("EPISODES_ARTICLES_ARTICLE_ID_FK"), new TableField[] { EpisodesArticles.EPISODES_ARTICLES.ARTICLE_ID }, Keys.ARTICLES_PK, new TableField[] { Articles.ARTICLES.ARTICLE_ID }, true);
    public static final ForeignKey<EpisodesArticlesRecord, EpisodesRecord> EPISODES_ARTICLES_EPISODE_ID_FK = Internal.createForeignKey(EpisodesArticles.EPISODES_ARTICLES, DSL.name("EPISODES_ARTICLES_EPISODE_ID_FK"), new TableField[] { EpisodesArticles.EPISODES_ARTICLES.EPISODE_ID }, Keys.EPISODES_PK, new TableField[] { Episodes.EPISODES.EPISODE_ID }, true);
    public static final ForeignKey<TelegramUpdatesRecord, TelegramChatsRecord> UPDATE_CHAT_ID_FK = Internal.createForeignKey(TelegramUpdates.TELEGRAM_UPDATES, DSL.name("UPDATE_CHAT_ID_FK"), new TableField[] { TelegramUpdates.TELEGRAM_UPDATES.CHAT_ID }, Keys.CHAT_ID_UNIQUE, new TableField[] { TelegramChats.TELEGRAM_CHATS.CHAT_ID }, true);
}
